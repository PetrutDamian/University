(defun fa(l n poz)
(cond ((null l) nil)
((equal poz n) (car l))
(t (fa (cdr l) n (+ poz 1)))
)
)

(defun fam(l n)
(fa l n 1)
)

(defun fb(a l)
(cond ((null l) nil)
((listp (car l)) (or (fb a (car l)) (fb a (cdr l))))
((equal a (car l)) t)
(t (fb a (cdr l)))
)
)

(defun fc(l c)
(cond ((null l) c)
((listp (car l)) (fc (cdr l) (fc (car l) (append c (list(car l))))))
(t (fc (cdr l) c))
)
)

(defun fcm(l)
(fc l (list l))
)

(defun apare(e l)
(cond ((null l) nil)
    ((equal e (car l)) t)
    ((apare e (cdr l)))
)
)

(defun fd(l)
(cond ((null l) nil)
((apare (car l) (cdr l)) (fd (cdr l)))
(t (cons (car l) (fd (cdr l))))
)
)